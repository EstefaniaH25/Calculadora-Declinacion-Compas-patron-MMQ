import streamlit as st
import base64
from datetime import datetime
import io
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont

# ‚úÖ Configuraci√≥n de la p√°gina (¬°esto va primero!)
st.set_page_config(page_title="Calculadora N√°utica", page_icon="üß≠", layout="centered")

# üé® Estilos personalizados y firma flotante
st.markdown("""
    <style>
        html, body, [class*="css"] {
            font-family: 'Segoe UI', sans-serif;
        }
        h1 {
            color: navy;
        }
        .custom-footer {
            text-align: center;
            color: gray;
            font-size: 14px;
            margin-top: 50px;
        }
        .stButton>button {
            background-color: #004080;
            color: white;
            border-radius: 8px;
            padding: 0.5em 1.5em;
            font-weight: bold;
        }
        .stButton>button:hover {
            background-color: #0066cc;
        }
        .download-button {
            text-align: center;
            margin-top: 20px;
        }
        .warning {
            background-color: #ffffcc;
            padding: 10px;
            border-left: 5px solid #ffcc00;
            color: #333;
            font-weight: bold;
        }
        .input-container {
            display: flex;
            align-items: center;
        }
        .input-degree {
            margin-right: 5px;
        }
        .input-decimal {
            margin-left: 5px;
            width: 70px;
        }
    </style>
""", unsafe_allow_html=True)

# üß≠ T√≠tulo principal con s√≠mbolo sigma (œÉ)
st.markdown("<h1 style='text-align: center;'>üß≠ Calculadora de Desv√≠os N√°uticos (œÉ)</h1>", unsafe_allow_html=True)
st.markdown("---")
st.markdown("### Ingrese los datos en formato grados¬∞,d√©cimas:")

# Funci√≥n para convertir el formato xxx,x a xxx¬∞,x y a valor decimal
def format_to_decimal(input_str):
    try:
        grados, decimas = map(float, input_str.split(","))
        return grados + (decimas / 10), f"{int(grados)}¬∞,{int(decimas)}"
    except ValueError:
        st.error("Formato incorrecto. Use grados,d√©cimas (ej: 123,4)")
        return None, None

# üì• Entradas del usuario en un solo campo de texto
Azv_str = st.text_input("üîπ Azv (Azimut Verdadero) - Grados,d√©cimas (ej: 123,4)", "70,5")
Azgc_str = st.text_input("üîπ Azgc (Azimut del Girocomp√°s) - Grados,d√©cimas", "70,8")
Rgc_str = st.text_input("üîπ Rgc (Rumbo del Girocomp√°s) - Grados,d√©cimas", "132,5")
Rcp_str = st.text_input("üîπ Rcp (Rumbo del Comp√°s Patr√≥n) - Grados,d√©cimas", "144,6")
Dm_str = st.text_input("üîπ Dm (Declinaci√≥n Magn√©tica) - Grados,d√©cimas", "-10,5")

# Convertir las entradas a formato decimal y formatearlas
Azv, Azv_formatted = format_to_decimal(Azv_str)
Azgc, Azgc_formatted = format_to_decimal(Azgc_str)
Rgc, Rgc_formatted = format_to_decimal(Rgc_str)
Rcp, Rcp_formatted = format_to_decimal(Rcp_str)
Dm, Dm_formatted = format_to_decimal(Dm_str)

# üßÆ C√°lculos
def calcular_desvios(Azv, Azgc, Rgc, Rcp, Dm):
    egc = Azv - Azgc           # Desv√≠o del girocomp√°s (Œµgc)
    Rv = Rgc + egc             # Rumbo verdadero estimado
    Vt = Rv - Rcp              # Variaci√≥n total
    delta_cp = Vt - Dm         # Desv√≠o del comp√°s patr√≥n (Œ¥cp)
    
    return egc, Rv, Vt, delta_cp

# Funci√≥n para crear PDF con ReportLab
def crear_pdf(Azv_formatted, Azgc_formatted, Rgc_formatted, Rcp_formatted, Dm_formatted, egc, Rv, Vt, delta_cp, alerta_delta_cp):
    buffer = io.BytesIO()
    
    # Configurar el documento
    doc = SimpleDocTemplate(buffer, pagesize=letter)
    story = []
    
    # Estilos
    styles = getSampleStyleSheet()
    titulo_style = ParagraphStyle(
        'TituloStyle',
        parent=styles['Heading1'],
        fontName='Helvetica-Bold',
        fontSize=16,
        alignment=1,  # Centrado
        spaceAfter=20
    )
    
    subtitulo_style = ParagraphStyle(
        'SubtituloStyle', 
        parent=styles['Heading2'],
        fontName='Helvetica-Bold',
        fontSize=14,
        spaceAfter=10
    )
    
    normal_style = ParagraphStyle(
        'NormalStyle',
        parent=styles['Normal'],
        fontName='Helvetica',
        fontSize=12,
        spaceAfter=5
    )
    
    warning_style = ParagraphStyle(
        'WarningStyle',
        parent=styles['Normal'],
        fontName='Helvetica-Bold',
        fontSize=12,
        textColor=colors.orange,
        spaceAfter=5
    )
    
    # T√≠tulo con s√≠mbolo sigma
    titulo = Paragraph("Calculadora de Desv√≠os N√°uticos (œÉ)", titulo_style)
    story.append(titulo)
    
    # Fecha y hora
    fecha_actual = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
    fecha = Paragraph(f"Generado el: {fecha_actual}", styles['Italic'])
    story.append(fecha)
    story.append(Spacer(1, 0.5*inch))
    
    # Datos ingresados
    datos_titulo = Paragraph("Datos Ingresados:", subtitulo_style)
    story.append(datos_titulo)
    
    story.append(Paragraph(f"Azv (Azimut Verdadero): {Azv_formatted}", normal_style))
    story.append(Paragraph(f"Azgc (Azimut del Girocomp√°s): {Azgc_formatted}", normal_style))
    story.append(Paragraph(f"Rgc (Rumbo del Girocomp√°s): {Rgc_formatted}", normal_style))
    story.append(Paragraph(f"Rcp (Rumbo del Comp√°s Patr√≥n): {Rcp_formatted}", normal_style))
    story.append(Paragraph(f"Dm (Declinaci√≥n Magn√©tica): {Dm_formatted}", normal_style))
    
    story.append(Spacer(1, 0.5*inch))
    
    # Resultados
    resultados_titulo = Paragraph("Resultados del C√°lculo:", subtitulo_style)
    story.append(resultados_titulo)
    
    story.append(Paragraph(f"Œµgc (Azv - Azgc) = {decimal_to_format(egc)}", normal_style))
    story.append(Paragraph(f"Rv (Rgc + Œµgc) = {decimal_to_format(Rv)}", normal_style))
    story.append(Paragraph(f"Vt (Rv - Rcp) = {decimal_to_format(Vt)}", normal_style))
    
    # Resaltar desv√≠o del comp√°s patr√≥n si est√° fuera de rango
    if alerta_delta_cp:
        story.append(Paragraph(f"Œ¥cp (Vt - Dm) = {decimal_to_format(delta_cp)} ‚ö†Ô∏è FUERA DE RANGO ACEPTABLE", warning_style))
        story.append(Paragraph("El desv√≠o del comp√°s patr√≥n excede el l√≠mite recomendado de ¬±1¬∞,5", warning_style))
    else:
        story.append(Paragraph(f"Œ¥cp (Vt - Dm) = {decimal_to_format(delta_cp)}", normal_style))
    
    story.append(Spacer(1, inch))
    
    # Pie de p√°gina
    footer = Paragraph("Desarrollado por QUIROGA MATIAS ¬© 2025", styles['Italic'])
    story.append(footer)
    
    # Construir el documento
    doc.build(story)
    
    # Obtener el valor del buffer y devolverlo
    pdf_data = buffer.getvalue()
    buffer.close()
    
    return pdf_data

# Funci√≥n para crear enlace de descarga
def get_binary_file_downloader_html(bin_data, file_label='File', filename='file.pdf'):
    bin_str = base64.b64encode(bin_data).decode()
    href = f'<a href="data:application/octet-stream;base64,{bin_str}" download="{filename}" class="download-button-link" style="background-color: #004080; color: white; padding: 10px 15px; border-radius: 5px; text-decoration: none; font-weight: bold;">{file_label}</a>'
    return href

# üîò Bot√≥n de c√°lculo
if st.button("‚öì Calcular"):
    # Verificar que todos los valores han sido ingresados correctamente
    if Azv is not None and Azgc is not None and Rgc is not None and Rcp is not None and Dm is not None:
        egc, Rv, Vt, delta_cp = calcular_desvios(Azv, Azgc, Rgc, Rcp, Dm)
        
        # Verificar si el desv√≠o del comp√°s patr√≥n est√° fuera de rango
        alerta_delta_cp = abs(delta_cp) > 1.5
        
        st.markdown("### üìä Resultados del C√°lculo")
        st.success(f"Œµgc (Azv - Azgc) = **{decimal_to_format(egc)}**")
        st.success(f"Rv (Rgc + Œµgc) = **{decimal_to_format(Rv)}**")
        st.success(f"Vt (Rv - Rcp) = **{decimal_to_format(Vt)}**")
        
        # Mostrar el resultado del desv√≠o del comp√°s patr√≥n con alerta si es necesario
        if alerta_delta_cp:
            st.markdown(f"""
            <div class="warning">
                Œ¥cp (Vt - Dm) = <strong>{decimal_to_format(delta_cp)}</strong> ‚ö†Ô∏è<br>
                ¬°ATENCI√ìN! El desv√≠o del comp√°s patr√≥n excede el l√≠mite recomendado de ¬±1¬∞,5
            </div>
            """, unsafe_allow_html=True)
        else:
            st.success(f"Œ¥cp (Vt - Dm) = **{decimal_to_format(delta_cp)}**")
        
        st.markdown("---")
        
        try:
            # Generar PDF y crear enlace de descarga
            pdf_bytes = crear_pdf(Azv_formatted, Azgc_formatted, Rgc_formatted, Rcp_formatted, Dm_formatted, egc, Rv, Vt, delta_cp, alerta_delta_cp)
            fecha_archivo = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"Resultados_Desvios_Nauticos_{fecha_archivo}.pdf"
            
            st.markdown("<div class='download-button'>", unsafe_allow_html=True)
            download_link = get_binary_file_downloader_html(pdf_bytes, 'üì• Descargar Resultados como PDF', filename)
            st.markdown(download_link, unsafe_allow_html=True)
            st.markdown("</div>", unsafe_allow_html=True)
        except Exception as e:
            st.error(f"Hubo un problema al generar el PDF. Por favor intente nuevamente.")
            st.error(f"Error: {str(e)}")

# üñãÔ∏è Firma
st.markdown("""
    <div class="custom-footer">
        Desarrollado por <strong>QUIROGA MATIAS</strong> üåä<br>
        ¬© 2025 - Todos los derechos reservados.
    </div>
""", unsafe_allow_html=True)
